Index: build.gradle
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>plugins {\n    id 'java'\n    id 'org.springframework.boot' version '3.0.6'\n    id 'io.spring.dependency-management' version '1.1.0'\n}\n\ngroup = 'com.ml'\nversion = '0.0.1-SNAPSHOT'\nsourceCompatibility = '17'\n\nconfigurations {\n    compileOnly {\n        extendsFrom annotationProcessor\n    }\n}\n\nrepositories {\n    mavenCentral()\n}\n\ndependencies {\n    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'\n    implementation 'org.springframework.boot:spring-boot-starter-web'\n    compileOnly 'org.projectlombok:lombok'\n    runtimeOnly 'com.h2database:h2'\n    annotationProcessor 'org.projectlombok:lombok'\n    implementation 'org.springframework.boot:spring-boot-starter-test'\n\n    implementation('io.opentelemetry.instrumentation:opentelemetry-instrumentation-annotations:1.25.1')\n\n    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.9.2'\n    testImplementation 'org.junit.jupiter:junit-jupiter-engine:5.9.2'\n    testImplementation 'org.junit.platform:junit-platform-suite-api:1.9.1'\n    testImplementation 'org.junit.platform:junit-platform-suite-engine:1.9.1'\n}\n\ntasks.named('test') {\n    useJUnitPlatform()\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/build.gradle b/build.gradle
--- a/build.gradle	(revision 39672ae115f46ecfd467f60fdfaebdd602ee79b1)
+++ b/build.gradle	(date 1683248992265)
@@ -25,7 +25,7 @@
     runtimeOnly 'com.h2database:h2'
     annotationProcessor 'org.projectlombok:lombok'
     implementation 'org.springframework.boot:spring-boot-starter-test'
-
+    implementation 'javax.validation:validation-api:2.0.1.Final'
     implementation('io.opentelemetry.instrumentation:opentelemetry-instrumentation-annotations:1.25.1')
 
     testImplementation 'org.junit.jupiter:junit-jupiter-api:5.9.2'
Index: src/test/java/com/ml/testsexamples/services/BankAccountServiceTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/java/com/ml/testsexamples/services/BankAccountServiceTest.java b/src/test/java/com/ml/testsexamples/services/BankAccountServiceTest.java
new file mode 100644
--- /dev/null	(date 1683334326189)
+++ b/src/test/java/com/ml/testsexamples/services/BankAccountServiceTest.java	(date 1683334326189)
@@ -0,0 +1,193 @@
+package com.ml.testsexamples.services;
+
+import com.ml.testsexamples.dto.CustomerDataDto;
+import com.ml.testsexamples.enums.CustomerDataFields;
+import com.ml.testsexamples.repositories.CustomerDataRepository;
+import jakarta.persistence.EntityNotFoundException;
+import org.junit.jupiter.api.Test;
+import org.mockito.InjectMocks;
+import org.mockito.Mock;
+import org.mockito.junit.jupiter.MockitoSettings;
+import org.springframework.data.util.Pair;
+
+import java.util.Date;
+import java.util.List;
+import java.util.Optional;
+
+import static org.junit.jupiter.api.Assertions.*;
+import static org.junit.jupiter.api.Assertions.assertEquals;
+import static org.mockito.Mockito.*;
+
+@MockitoSettings
+public class BankAccountServiceTest {
+
+    @Mock
+    private CustomerDataRepository repository;
+
+    @InjectMocks
+    private BankAccountService service;
+
+    @Test
+    public void getAll() {
+
+        CustomerDataDto.CustomerDataDtoBuilder customerDataBuilder = CustomerDataDto.builder();
+
+        CustomerDataDto customerData1 = customerDataBuilder
+                .id(1L)
+                .firstName("Theodore")
+                .lastName("Roosevelt")
+                .balance(3500)
+                .minimumBalance(1500)
+                .build();
+
+        CustomerDataDto customerData2 = customerDataBuilder
+                .id(2L)
+                .firstName("Franklin")
+                .lastName("Benjamin")
+                .balance(0)
+                .minimumBalance(-1000)
+                .build();
+
+        when(repository.findAll()).thenReturn(List.of(customerData1, customerData2));
+
+        List<CustomerDataDto> result = service.findAll();
+
+        assertNotNull(result);
+        assertEquals(2, result.size());
+
+        assertEquals(1L, result.get(0).getId());
+        assertEquals("Theodore", result.get(0).getFirstName());
+        assertEquals("Roosevelt", result.get(0).getLastName());
+        assertEquals(3500, result.get(0).getBalance());
+        assertEquals(1500, result.get(0).getMinimumBalance());
+        assertInstanceOf(Date.class, result.get(0).getCreatedDate());
+
+        assertEquals(2L, result.get(1).getId());
+        assertEquals("Franklin", result.get(1).getFirstName());
+        assertEquals("Benjamin", result.get(1).getLastName());
+        assertEquals(0, result.get(1).getBalance());
+        assertEquals(-1000, result.get(1).getMinimumBalance());
+        assertInstanceOf(Date.class, result.get(1).getCreatedDate());
+
+        verify(repository).findAll();
+        verifyNoMoreInteractions(repository);
+    }
+
+    @Test
+    public void findById() {
+
+        CustomerDataDto.CustomerDataDtoBuilder customerDataBuilder = CustomerDataDto.builder();
+
+        CustomerDataDto customerData1 = customerDataBuilder
+                .id(1L)
+                .firstName("Theodore")
+                .lastName("Roosevelt")
+                .balance(3500)
+                .minimumBalance(1500)
+                .build();
+
+        when(repository.findById(1L)).thenReturn(Optional.of(customerData1));
+
+        Optional<CustomerDataDto> result = service.findById(1L);
+
+        assertTrue(result.isPresent());
+        assertEquals(1L, result.get().getId());
+        assertEquals("Theodore", result.get().getFirstName());
+        assertEquals("Roosevelt", result.get().getLastName());
+        assertEquals(3500, result.get().getBalance());
+        assertEquals(1500, result.get().getMinimumBalance());
+        assertInstanceOf(Date.class, result.get().getCreatedDate());
+
+        verify(repository).findById(1L);
+        verifyNoMoreInteractions(repository);
+    }
+
+    @Test
+    public void findById_CustomerNotExists() {
+        when(repository.findById(1L)).thenReturn(Optional.empty());
+
+        Optional<CustomerDataDto> result = service.findById(1L);
+
+        assertFalse(result.isPresent());
+
+        verify(repository).findById(1L);
+        verifyNoMoreInteractions(repository);
+    }
+
+    @Test
+    public void update() {
+
+        CustomerDataDto.CustomerDataDtoBuilder customerDataBuilder = CustomerDataDto.builder();
+
+        CustomerDataDto originalDto = customerDataBuilder
+                .id(1L)
+                .firstName("Theodore")
+                .lastName("Roosevelt")
+                .balance(3500)
+                .minimumBalance(1500)
+                .build();
+
+        CustomerDataDto updatedDto = customerDataBuilder
+                .id(1L)
+                .firstName("Meir")
+                .lastName("Roth")
+                .balance(10000)
+                .minimumBalance(0)
+                .build();
+
+        when(repository.findById(1L)).thenReturn(Optional.of(originalDto));
+        when(repository.save(any(CustomerDataDto.class))).thenReturn(updatedDto);
+
+        Optional<CustomerDataDto> result = service.update(1L, Pair.of(CustomerDataFields.FIRST_NAME, "Meir"),
+                Pair.of(CustomerDataFields.LAST_NAME, "Roth"), Pair.of(CustomerDataFields.BALANCE, "10000"),
+                Pair.of(CustomerDataFields.MINIMUM_BALANCE, "0"));
+
+        assertTrue(result.isPresent());
+        assertEquals(1L, result.get().getId());
+        assertEquals("Meir", result.get().getFirstName());
+        assertEquals("Roth", result.get().getLastName());
+        assertEquals(10000, result.get().getBalance());
+        assertEquals(0, result.get().getMinimumBalance());
+        assertInstanceOf(Date.class, result.get().getCreatedDate());
+
+        verify(repository).findById(1L);
+        verify(repository).save(any(CustomerDataDto.class));
+        verifyNoMoreInteractions(repository);
+    }
+
+    @Test
+    public void update_UpdateBalance_WithNotExistsCustomerId() {
+        when(repository.findById(3L)).thenReturn(Optional.empty());
+
+        assertThrows(EntityNotFoundException.class, () -> service.update(3L, Pair.of(CustomerDataFields.BALANCE, "1000"), Pair.of(CustomerDataFields.BALANCE, "15000")));
+    }
+
+    @Test
+    public void update_UpdateBalance_WithUnauthorizedField() {
+
+        CustomerDataDto.CustomerDataDtoBuilder customerDataBuilder = CustomerDataDto.builder();
+
+        CustomerDataDto originalDto = customerDataBuilder
+                .id(1L)
+                .firstName("Theodore")
+                .lastName("Roosevelt")
+                .balance(3500)
+                .minimumBalance(1500)
+                .build();
+
+        CustomerDataDto updatedDto = customerDataBuilder
+                .id(1L)
+                .firstName("Theodore")
+                .lastName("Roosevelt")
+                .balance(4000)
+                .minimumBalance(1500)
+                .build();
+
+        when(repository.findById(1L)).thenReturn(Optional.of(originalDto));
+
+        assertThrows(IllegalArgumentException.class, () -> service.update(1L, Pair.of(CustomerDataFields.ID, "1000"), Pair.of(CustomerDataFields.BALANCE, "8500")));
+
+        verify(repository).findById(1L);
+        verifyNoMoreInteractions(repository);
+    }
+}
\ No newline at end of file
Index: src/test/java/com/ml/testsexamples/config/InitDataConfig.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/java/com/ml/testsexamples/config/InitDataConfig.java b/src/test/java/com/ml/testsexamples/config/InitDataConfig.java
new file mode 100644
--- /dev/null	(date 1683251410850)
+++ b/src/test/java/com/ml/testsexamples/config/InitDataConfig.java	(date 1683251410850)
@@ -0,0 +1,36 @@
+package com.ml.testsexamples.config;
+
+import com.ml.testsexamples.dto.CustomerDataDto;
+import com.ml.testsexamples.repositories.CustomerDataRepository;
+import org.springframework.boot.CommandLineRunner;
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Configuration;
+
+@Configuration
+public class InitDataConfig {
+
+    @Bean
+    public CommandLineRunner initData(CustomerDataRepository customerDataRepository) {
+        return args -> {
+
+            CustomerDataDto.CustomerDataDtoBuilder customerDataBuilder = CustomerDataDto.builder();
+
+            CustomerDataDto customerData1 = customerDataBuilder
+                    .firstName("Theodore")
+                    .lastName("Roosevelt")
+                    .balance(3500)
+                    .minimumBalance(1500)
+                    .build();
+
+            CustomerDataDto customerData2 = customerDataBuilder
+                    .firstName("Franklin")
+                    .lastName("Benjamin")
+                    .balance(0)
+                    .minimumBalance(-1000)
+                    .build();
+
+            customerDataRepository.save(customerData1);
+            customerDataRepository.save(customerData2);
+        };
+    }
+}
\ No newline at end of file
Index: src/main/java/com/ml/testsexamples/dto/CustomerDataDto.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/ml/testsexamples/dto/CustomerDataDto.java b/src/main/java/com/ml/testsexamples/dto/CustomerDataDto.java
new file mode 100755
--- /dev/null	(date 1683256860912)
+++ b/src/main/java/com/ml/testsexamples/dto/CustomerDataDto.java	(date 1683256860912)
@@ -0,0 +1,36 @@
+package com.ml.testsexamples.dto;
+
+import jakarta.persistence.*;
+import lombok.*;
+
+import java.util.Date;
+
+@Builder
+@NoArgsConstructor(force = true)
+@AllArgsConstructor
+@Data
+@Entity
+@Table(name = "customer_data", indexes = {
+        @Index(name = "idx_customer_data_id", columnList = "id", unique = true)
+})
+public final class CustomerDataDto {
+
+    @Id
+    @GeneratedValue(strategy = GenerationType.AUTO)
+    @EqualsAndHashCode.Exclude
+    private Long id;
+
+    @NonNull
+    private String firstName;
+
+    @NonNull
+    private String lastName;
+
+    private double balance;
+
+    private double minimumBalance;
+
+    @NonNull
+    @Builder.Default
+    private Date createdDate = new Date();
+}
\ No newline at end of file
Index: src/main/java/com/ml/testsexamples/services/BankAccountService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/ml/testsexamples/services/BankAccountService.java b/src/main/java/com/ml/testsexamples/services/BankAccountService.java
new file mode 100644
--- /dev/null	(date 1683319677073)
+++ b/src/main/java/com/ml/testsexamples/services/BankAccountService.java	(date 1683319677073)
@@ -0,0 +1,62 @@
+package com.ml.testsexamples.services;
+
+import com.ml.testsexamples.dto.CustomerDataDto;
+import com.ml.testsexamples.enums.CustomerDataFields;
+import com.ml.testsexamples.repositories.CustomerDataRepository;
+import jakarta.persistence.EntityNotFoundException;
+import lombok.RequiredArgsConstructor;
+import lombok.extern.slf4j.Slf4j;
+import org.springframework.data.util.Pair;
+import org.springframework.stereotype.Service;
+
+import java.util.List;
+import java.util.Optional;
+
+@Slf4j
+@RequiredArgsConstructor
+@Service
+public class BankAccountService {
+
+    private final CustomerDataRepository repository;
+
+    public List<CustomerDataDto> findAll() {
+        log.info("BankAccountService.getAll() - retrieving all customers data.");
+        return repository.findAll();
+    }
+
+    public Optional<CustomerDataDto> findById(Long id) {
+        log.info("BankAccountService.getById(id) - retrieving customer data by ID.");
+        return repository.findById(id);
+    }
+
+    @SafeVarargs
+    public final Optional<CustomerDataDto> update(Long id, Pair<CustomerDataFields, String>... pairs) {
+
+        log.info("BankAccountService.update(id) - update customer data by ID.");
+        Optional<CustomerDataDto> original = repository.findById(id);
+        if (original.isEmpty()) {
+            throw new EntityNotFoundException("Invalid customer data ID");
+        }
+
+        CustomerDataDto.CustomerDataDtoBuilder customerDataBuilder = CustomerDataDto.builder();
+        CustomerDataDto updated = customerDataBuilder
+                .id(original.get().getId())
+                .firstName(original.get().getFirstName())
+                .lastName(original.get().getLastName())
+                .balance(original.get().getBalance())
+                .minimumBalance(original.get().getMinimumBalance())
+                .build();
+
+        for (Pair<CustomerDataFields, String> pair : pairs) {
+            switch (pair.getFirst()) {
+                case FIRST_NAME -> updated.setFirstName(pair.getSecond());
+                case LAST_NAME -> updated.setLastName(pair.getSecond());
+                case BALANCE -> updated.setBalance(Double.parseDouble(pair.getSecond()));
+                case MINIMUM_BALANCE -> updated.setMinimumBalance(Double.parseDouble(pair.getSecond()));
+                default ->
+                        throw new IllegalArgumentException("You are unauthorized to update this field.");
+            }
+        }
+        return Optional.of(repository.save(updated));
+    }
+}
\ No newline at end of file
Index: src/main/java/com/ml/testsexamples/repositories/CustomerDataRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/ml/testsexamples/repositories/CustomerDataRepository.java b/src/main/java/com/ml/testsexamples/repositories/CustomerDataRepository.java
new file mode 100644
--- /dev/null	(date 1683253945378)
+++ b/src/main/java/com/ml/testsexamples/repositories/CustomerDataRepository.java	(date 1683253945378)
@@ -0,0 +1,11 @@
+package com.ml.testsexamples.repositories;
+
+import com.ml.testsexamples.dto.CustomerDataDto;
+import lombok.NonNull;
+import org.springframework.data.repository.CrudRepository;
+
+import java.util.List;
+
+public interface CustomerDataRepository extends CrudRepository<CustomerDataDto, Long> {
+    @NonNull List<CustomerDataDto> findAll();
+}
\ No newline at end of file
Index: src/test/java/com/ml/testsexamples/services/BankAccountServiceIT.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/java/com/ml/testsexamples/services/BankAccountServiceIT.java b/src/test/java/com/ml/testsexamples/services/BankAccountServiceIT.java
new file mode 100644
--- /dev/null	(date 1683334194128)
+++ b/src/test/java/com/ml/testsexamples/services/BankAccountServiceIT.java	(date 1683334194128)
@@ -0,0 +1,117 @@
+package com.ml.testsexamples.services;
+
+import com.ml.testsexamples.dto.CustomerDataDto;
+import com.ml.testsexamples.enums.CustomerDataFields;
+import jakarta.persistence.EntityNotFoundException;
+import org.junit.jupiter.api.Test;
+import org.junit.jupiter.api.extension.ExtendWith;
+import org.mockito.junit.jupiter.MockitoExtension;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.boot.test.context.SpringBootTest;
+import org.springframework.data.util.Pair;
+import org.springframework.test.context.junit.jupiter.SpringExtension;
+import org.springframework.transaction.annotation.Transactional;
+
+import java.util.Date;
+import java.util.List;
+import java.util.Optional;
+
+import static org.junit.jupiter.api.Assertions.*;
+
+@SpringBootTest
+@ExtendWith(SpringExtension.class)
+@ExtendWith(MockitoExtension.class)
+@Transactional
+public class BankAccountServiceIT {
+
+    @Autowired
+    private BankAccountService service;
+
+    @Test
+    public void getAll() {
+
+        List<CustomerDataDto> result = service.findAll();
+
+        assertNotNull(result);
+        assertEquals(2, result.size());
+
+        assertEquals(1L, result.get(0).getId());
+        assertEquals("Theodore", result.get(0).getFirstName());
+        assertEquals("Roosevelt", result.get(0).getLastName());
+        assertEquals(3500, result.get(0).getBalance());
+        assertEquals(1500, result.get(0).getMinimumBalance());
+        assertInstanceOf(Date.class, result.get(0).getCreatedDate());
+
+        assertEquals(2L, result.get(1).getId());
+        assertEquals("Franklin", result.get(1).getFirstName());
+        assertEquals("Benjamin", result.get(1).getLastName());
+        assertEquals(0, result.get(1).getBalance());
+        assertEquals(-1000, result.get(1).getMinimumBalance());
+        assertInstanceOf(Date.class, result.get(1).getCreatedDate());
+    }
+
+    @Test
+    public void findById_FindFirstCustomerData() {
+
+        Optional<CustomerDataDto> result = service.findById(1L);
+
+        assertTrue(result.isPresent());
+        assertEquals(1L, result.get().getId());
+        assertEquals("Theodore", result.get().getFirstName());
+        assertEquals("Roosevelt", result.get().getLastName());
+        assertEquals(3500, result.get().getBalance());
+        assertEquals(1500, result.get().getMinimumBalance());
+        assertInstanceOf(Date.class, result.get().getCreatedDate());
+    }
+
+    @Test
+    public void findById_FindSecondCustomerData() {
+
+        Optional<CustomerDataDto> result = service.findById(2L);
+
+        assertTrue(result.isPresent());
+        assertEquals(2L, result.get().getId());
+        assertEquals("Franklin", result.get().getFirstName());
+        assertEquals("Benjamin", result.get().getLastName());
+        assertEquals(0, result.get().getBalance());
+        assertEquals(-1000, result.get().getMinimumBalance());
+        assertInstanceOf(Date.class, result.get().getCreatedDate());
+    }
+
+    @Test
+    public void findById_FindNotExistsCustomer() {
+        Optional<CustomerDataDto> result = service.findById(3L);
+        assertFalse(result.isPresent());
+    }
+
+    @Test
+    public void update() {
+        Optional<CustomerDataDto> result = service.update(2L, Pair.of(CustomerDataFields.FIRST_NAME, "Meir"),
+                Pair.of(CustomerDataFields.LAST_NAME, "Roth"), Pair.of(CustomerDataFields.BALANCE, "10000"),
+                Pair.of(CustomerDataFields.MINIMUM_BALANCE, "0"));
+
+        assertTrue(result.isPresent());
+        assertEquals(2L, result.get().getId());
+        assertEquals("Meir", result.get().getFirstName());
+        assertEquals("Roth", result.get().getLastName());
+        assertEquals(10000, result.get().getBalance());
+        assertEquals(0, result.get().getMinimumBalance());
+        assertInstanceOf(Date.class, result.get().getCreatedDate());
+    }
+
+    @Test
+    public void update_UpdateBalance_WithUnauthorizedField() {
+        assertThrows(IllegalArgumentException.class, () -> service.update(1L, Pair.of(CustomerDataFields.ID, "1000"), Pair.of(CustomerDataFields.BALANCE, "8500")));
+    }
+
+    @Test
+    public void update_UpdateBalance_WithNotExistsCustomerId() {
+        assertThrows(EntityNotFoundException.class, () -> service.update(3L, Pair.of(CustomerDataFields.BALANCE, "1000"), Pair.of(CustomerDataFields.BALANCE, "15000")));
+    }
+
+    @Test
+    public void findById_CustomerNotExists() {
+        Optional<CustomerDataDto> result = service.findById(3L);
+        assertFalse(result.isPresent());
+    }
+}
\ No newline at end of file
Index: src/test/java/com/ml/testsexamples/suites/BankSuiteTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/java/com/ml/testsexamples/suites/BankSuiteTest.java b/src/test/java/com/ml/testsexamples/suites/BankSuiteTest.java
new file mode 100644
--- /dev/null	(date 1683253212032)
+++ b/src/test/java/com/ml/testsexamples/suites/BankSuiteTest.java	(date 1683253212032)
@@ -0,0 +1,12 @@
+package com.ml.testsexamples.suites;
+
+import com.ml.testsexamples.services.BankAccountServiceIT;
+import com.ml.testsexamples.services.BankAccountServiceTest;
+import org.junit.platform.suite.api.SelectClasses;
+import org.junit.platform.suite.api.Suite;
+
+@Suite
+@SelectClasses({BankAccountServiceIT.class, BankAccountServiceTest.class})
+public class BankSuiteTest {
+    // intentionally empty
+}
Index: src/main/java/com/ml/testsexamples/enums/CustomerDataFields.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/ml/testsexamples/enums/CustomerDataFields.java b/src/main/java/com/ml/testsexamples/enums/CustomerDataFields.java
new file mode 100644
--- /dev/null	(date 1683319622709)
+++ b/src/main/java/com/ml/testsexamples/enums/CustomerDataFields.java	(date 1683319622709)
@@ -0,0 +1,5 @@
+package com.ml.testsexamples.enums;
+
+public enum CustomerDataFields {
+    ID, FIRST_NAME, LAST_NAME, BALANCE, MINIMUM_BALANCE, CREATE_DATE
+}
Index: src/main/java/com/ml/testsexamples/managers/BankManager.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/ml/testsexamples/managers/BankManager.java b/src/main/java/com/ml/testsexamples/managers/BankManager.java
new file mode 100644
--- /dev/null	(date 1683251106513)
+++ b/src/main/java/com/ml/testsexamples/managers/BankManager.java	(date 1683251106513)
@@ -0,0 +1,4 @@
+package com.ml.testsexamples.managers;
+
+public class BankManager {
+}
